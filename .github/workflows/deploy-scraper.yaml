name: Docker Build & Deploy Scraper

on:
  push:
    branches: [master]
    paths:
      - "backend/apps/scraper/**"

env:
  CONTAINER_NAME: scraper
  CONTAINER_PORT: 3102
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  KAFKA_ENDPOINT: ${{ secrets.KAFKA_ENDPOINT }}
  TELEGRAM_API_TOKEN: ${{ secrets.TELEGRAM_API_TOKEN }}
  TELEGRAM_API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
  TELEGRAM_API_ID: ${{ secrets.TELEGRAM_API_ID }}

jobs:
  deploy:
    runs-on: self-hosted
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Get short SHA
        id: vars
        run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Build Docker Image with unique tag
        run: |
          docker build -t $CONTAINER_NAME:${{ env.SHORT_SHA }} . -f ./Dockerfile.scraper

      - name: Stop and remove containers using old images of the same container (including current name)
        run: |
          # Remove any existing container with the current name first
          docker ps -a --filter "name=$CONTAINER_NAME-${{ env.SHORT_SHA }}" -q | xargs -r docker rm -f

          # Then remove other containers with the same name pattern
           docker ps -a --filter "name=$CONTAINER_NAME-*" --format '{{.ID}} {{.Image}}' | while read container_id image_ref; do
            image_tag=$(echo "$image_ref" | cut -d':' -f2)
            if [ "$image_tag" != "${{ env.SHORT_SHA }}" ]; then
              echo "Stopping and removing container $container_id using old image $image_ref"
              docker stop "$container_id" || true
              docker rm "$container_id" || true
            fi
          done

      - name: Run new container
        run: |
          docker run -d --name $CONTAINER_NAME-${{ env.SHORT_SHA }} --network=backend -e TELEGRAM_API_TOKEN=$TELEGRAM_API_TOKEN -e TELEGRAM_API_HASH=$TELEGRAM_API_HASH -e TELEGRAM_API_ID=$TELEGRAM_API_ID -e KAFKA_ENDPOINT=$KAFKA_ENDPOINT -e DATABASE_URL=$DATABASE_URL -e ENV=production -p $CONTAINER_PORT:$CONTAINER_PORT $CONTAINER_NAME:${{ env.SHORT_SHA }}

      - name: Remove old images of the same container (keep current)
        run: |
          docker images --filter "reference=$CONTAINER_NAME:*" --format '{{.Repository}}:{{.Tag}}' | \
          grep -v ":${{ env.SHORT_SHA }}" | \
          xargs -r docker rmi -f

      - name: Remove stopped containers with same name pattern
        run: |
          docker ps -a --filter "name=$CONTAINER_NAME-*" --filter "status=exited" -q | \
          xargs -r docker rm

      - name: Truncate container logs
        run: |
          CONTAINER_ID=$(docker ps -qf "name=$CONTAINER_NAME-${{ env.SHORT_SHA }}")
          if [ -n "$CONTAINER_ID" ]; then
            LOG_FILE="/var/lib/docker/containers/$CONTAINER_ID/${CONTAINER_ID}-json.log"
            if [ -f "$LOG_FILE" ]; then
              sudo truncate -s 0 "$LOG_FILE"
            fi
          fi

      - name: Cleanup unused Docker resources
        run: docker system prune -f --volumes

      - name: Cleanup old dangling images
        run: docker image prune -f
